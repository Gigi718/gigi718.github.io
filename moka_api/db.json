{"main":{"Chapter-1":{"content":"<h2><a name=\"1-1-javascript-\" class=\"anchor\" href=\"#1-1-javascript-\"><span class=\"header-link\"></span></a>1.1 JavaScript语言核心</h2><p><strong>// 所有在双斜杠后的内容都表示注释</strong><br><strong>// 变量是表示值的一个符号名字</strong>  </p>\n<p><strong>//  变量是通过var关键字声明的</strong>   </p>\n<pre><code><span class=\"hljs-keyword\">var</span> x;    <span class=\"hljs-comment\">//  声明一个变量x</span>\n</code></pre><p><strong>//值可以通过等号赋值给变量</strong>  </p>\n<pre><code><span class=\"hljs-attribute\">x</span> = <span class=\"hljs-number\">0</span><span class=\"hljs-comment\">;   //  现在变量x的值为0</span>\n</code></pre><p><strong>// JavaScript支持多种数据类型</strong> </p>\n<pre><code><span class=\"hljs-attr\">x</span> = <span class=\"hljs-number\">1</span>;        //  数字  \n<span class=\"hljs-attr\">x</span> = <span class=\"hljs-number\">0.01</span>;     // 小数  \n<span class=\"hljs-attr\">x</span> = <span class=\"hljs-string\">\"hello world\"</span>;    //  由双引号内的文本构成的字符串  \n<span class=\"hljs-attr\">x</span> = <span class=\"hljs-string\">'JavaScript'</span>;     //  单引号内的文本同样构成字符串  \n<span class=\"hljs-attr\">x</span> = <span class=\"hljs-literal\">true</span>;  \n<span class=\"hljs-attr\">x</span> = <span class=\"hljs-literal\">false</span>;    //  两个布尔值  \n<span class=\"hljs-attr\">x</span> = null;     //  null是一个特殊的值,意思为<span class=\"hljs-string\">\"空\"</span>  \n<span class=\"hljs-attr\">x</span> = undefined;    //  undefined和null非常相似\n</code></pre><p><strong>JavaScript中两个非常重要的类型就是对象和数组。</strong>  </p>\n<pre><code><span class=\"hljs-string\">//</span> avaScript中最重要的类型就是对象  \n<span class=\"hljs-string\">//</span> 对象是名/值对的集合,或字符串到值映射的集合\n\nvar book = {                <span class=\"hljs-string\">//</span> 对象是由花括号括起来的\n    topic : <span class=\"hljs-string\">\"JavaScript\"</span>,   <span class=\"hljs-string\">//</span> 属性<span class=\"hljs-string\">\"topic\"</span>的值是<span class=\"hljs-string\">\"JavaScript\"</span>\n    fat = <span class=\"hljs-literal\">true</span>              <span class=\"hljs-string\">//</span> 属性<span class=\"hljs-string\">\"fat\"</span>的值是<span class=\"hljs-literal\">true</span>\n};                          <span class=\"hljs-string\">//</span> 右花括号标记了对象的结束\n</code></pre><p>//  <strong>通过&quot;</strong>.<strong>&quot;或&quot;</strong>[ ]<strong>&quot;来访问对象属性</strong>  </p>\n<pre><code>    book.topic             <span class=\"hljs-string\">//</span>  → <span class=\"hljs-string\">\"Javascript\"</span>  \n    book[<span class=\"hljs-string\">\"fat\"</span>]           <span class=\"hljs-string\">//</span>  → <span class=\"hljs-literal\">true</span>:另外一种获取属性的方式\n    book.author = <span class=\"hljs-string\">\"Flanagan\"</span>;       <span class=\"hljs-string\">//</span> → 通过赋值创建一个新属性\n    book.contents = {};     <span class=\"hljs-string\">//</span>  → {}是一个空对象,它没有属性\n</code></pre><p><strong>//  JavaScript同样支持数组(以数字为索引的列表)</strong>  </p>\n<pre><code>var primes = [<span class=\"hljs-number\">2</span>,<span class=\"hljs-number\">3</span>,<span class=\"hljs-number\">5</span>,<span class=\"hljs-number\">7</span>];     <span class=\"hljs-comment\">// 拥有4个值的数组,由\"[\"和\"]\"划定边界 </span>\nprimes[<span class=\"hljs-number\">0</span>];                  <span class=\"hljs-comment\">// → 2: 数组中的第一个元素(索引为0)</span>\nprimes.length               <span class=\"hljs-comment\">// → 4: 数组中的元素个数</span>\nprimes[primes.length - <span class=\"hljs-number\">1</span>]   <span class=\"hljs-comment\">// → 7: 数组中最后一个元素</span>\nprimes[<span class=\"hljs-number\">4</span>] = <span class=\"hljs-number\">9</span>;              <span class=\"hljs-comment\">// 通过赋值来添加新元素</span>\nprimes[<span class=\"hljs-number\">4</span>] = <span class=\"hljs-number\">11</span>;             <span class=\"hljs-comment\">// 通过赋值来改变已有元素</span>\nvar empty = [];             <span class=\"hljs-comment\">// []是空数组,它具有0个元素</span>\nempty.length                <span class=\"hljs-comment\">// → 0</span>\n</code></pre><p><strong>// 数组和对象中都可以包含另一个数组或对象:</strong></p>\n<pre><code>var points = [                  // 具有两个元素的数组\n    {x: <span class=\"hljs-number\">0</span>, y: <span class=\"hljs-number\">0</span>},               // 每个元素都是一个对象\n    {x: <span class=\"hljs-number\">1</span>, y: <span class=\"hljs-number\">1</span>}\n]\nvar data = {                    // 一个包含两个属性的对象\n    trial1: <span class=\"hljs-string\">[[1,2],[3,4]]</span>,      // 每一个属性都是数组\n    trial2: <span class=\"hljs-string\">[[2,3],[4,5]]</span>       // 数组的元素也是数组\n}\n</code></pre><p><strong>以上通过方括号定义数组元素和通过花括号定义对象属性名和属性值之间的映射关系的语法成为初始化表达式(initialize expression)。<br>表达式是JavaScript中的一个短语,这个短语可以通过运算得出一个值。通过&quot;.&quot;和&quot;[]&quot;来引用对象属性或数组元素的值就构成一个表达式。</strong>  </p>\n<p>JavaScript中最常见的表达式写法是像下面代码这样使用运算符(operator):  </p>\n<pre><code><span class=\"hljs-comment\">// 运算符作用于操作数,生成一个新的值</span>\n<span class=\"hljs-comment\">// 最常见的是算术运算符</span>\n<span class=\"hljs-number\">3</span> + <span class=\"hljs-number\">2</span>           <span class=\"hljs-comment\">// → 5: 加法</span>\n<span class=\"hljs-number\">3</span> - <span class=\"hljs-number\">2</span>           <span class=\"hljs-comment\">// → 1: 减法</span>\n<span class=\"hljs-number\">3</span> * <span class=\"hljs-number\">2</span>           <span class=\"hljs-comment\">// → 6: 乘法</span>\n<span class=\"hljs-number\">3</span> / <span class=\"hljs-number\">2</span>           <span class=\"hljs-comment\">// → 1.5: 除法</span>\npoints[<span class=\"hljs-number\">1</span>].x - points[<span class=\"hljs-number\">0</span>].x       <span class=\"hljs-comment\">// → 1: 更复杂的操作数也能照常工作</span>\n<span class=\"hljs-string\">\"3\"</span> + <span class=\"hljs-string\">\"2\"</span>       <span class=\"hljs-comment\">// → 32: + 可以完成加法运算也可以作字符串连接</span>\n</code></pre><p><strong>// JavaScript定义了一些算数运算符的简写形式</strong></p>\n<pre><code><span class=\"hljs-built_in\">var</span> <span class=\"hljs-built_in\">count</span> = <span class=\"hljs-number\">0</span>;                  <span class=\"hljs-comment\">// 定义一个变量</span>\n<span class=\"hljs-built_in\">count</span>++;                        <span class=\"hljs-comment\">// 自增1</span>\n<span class=\"hljs-built_in\">count</span>--;                        <span class=\"hljs-comment\">// 自减1</span>\n<span class=\"hljs-built_in\">count</span> += <span class=\"hljs-number\">2</span>;                     <span class=\"hljs-comment\">// 自增2</span>\n<span class=\"hljs-built_in\">count</span> *= <span class=\"hljs-number\">3</span>;                     <span class=\"hljs-comment\">// 自乘3</span>\n<span class=\"hljs-built_in\">count</span>                           <span class=\"hljs-comment\">// →  6:变量名本身也是一个表达式</span>\n</code></pre><p><strong>// 相等关系运算符用来判断两值是否相等</strong><br><strong>// 不等、大于、小于运算符的运算结果是true或false</strong></p>\n<pre><code>var x = 2 ,y = 3;               <span class=\"hljs-string\">//</span> 这的 = 等号是赋值的意思,不是比较相等\nx == y;                         <span class=\"hljs-string\">//</span> → <span class=\"hljs-literal\">false</span>: 相等\nx != y;                         <span class=\"hljs-string\">//</span> → <span class=\"hljs-literal\">true</span>: 不等于\nx &lt; y;                          <span class=\"hljs-string\">//</span> → <span class=\"hljs-literal\">true</span>: 小于\nx &lt;= y;                         <span class=\"hljs-string\">//</span> → <span class=\"hljs-literal\">true</span>: 小于等于\nx &gt; y;                          <span class=\"hljs-string\">//</span> → <span class=\"hljs-literal\">false</span>: 大于等于\nx &gt;= y;                         <span class=\"hljs-string\">//</span> → <span class=\"hljs-literal\">false</span>: 大于等于\n<span class=\"hljs-string\">\"two\"</span> == <span class=\"hljs-string\">\"three\"</span>                <span class=\"hljs-string\">//</span> → <span class=\"hljs-literal\">false</span>: 两个字符串不相等\n<span class=\"hljs-string\">\"two\"</span> &gt; <span class=\"hljs-string\">\"three\"</span>                 <span class=\"hljs-string\">//</span> → <span class=\"hljs-literal\">true</span>: <span class=\"hljs-string\">\"tw\"</span>在字母表中的索引大于<span class=\"hljs-string\">\"th\"</span>\n<span class=\"hljs-literal\">false</span> == <span class=\"hljs-params\">(x &gt; y)</span>                <span class=\"hljs-string\">//</span> → <span class=\"hljs-literal\">true</span>: <span class=\"hljs-literal\">false</span>和<span class=\"hljs-literal\">false</span>相等\n</code></pre><p><strong>// 逻辑运算符是对布尔值的合并或求反</strong></p>\n<pre><code><span class=\"hljs-params\">(<span class=\"hljs-attr\">x</span> == 2)</span> &amp;&amp; <span class=\"hljs-params\">(<span class=\"hljs-attr\">y</span> == 3)</span>            <span class=\"hljs-string\">//</span> → <span class=\"hljs-literal\">true</span>: 两个比较都是<span class=\"hljs-literal\">true</span>,结果为<span class=\"hljs-literal\">true</span>\n<span class=\"hljs-params\">(x &gt; 3)</span> || <span class=\"hljs-params\">(y &lt; 3)</span>              <span class=\"hljs-string\">//</span> → <span class=\"hljs-literal\">false</span>: 两个比较一个为<span class=\"hljs-literal\">true</span>结果就是<span class=\"hljs-literal\">true</span>,两个都为<span class=\"hljs-literal\">false</span>结果才是<span class=\"hljs-literal\">false</span>\n!<span class=\"hljs-params\">(<span class=\"hljs-attr\">x</span> == y)</span>                       <span class=\"hljs-string\">//</span> → <span class=\"hljs-literal\">true</span>: ! 求反\n</code></pre>","head":{"title":"Chapter 1","date":"07 Sep 2017","tags":["JavaScript权威指南"],"skip":false,"realDate":"2017-09-07T05:47:07.000Z"}},"HTML5-基础篇：第一章":{"content":"<h4><a name=\"-\" class=\"anchor\" href=\"#-\"><span class=\"header-link\"></span></a>常见样式-边框</h4><p>边框粗细    1px<br>边框样式    style(solid dashed )<br>边框颜色    color(red yello green)<br>边框的形状   非矩形  </p>\n<h5><a name=\"-\" class=\"anchor\" href=\"#-\"><span class=\"header-link\"></span></a>使用边框实现三角形</h5><pre><code>    <span class=\"hljs-attribute\">width</span>:<span class=\"hljs-number\">0px</span>;\n    <span class=\"hljs-attribute\">height</span>:<span class=\"hljs-number\">0px</span>;\n    <span class=\"hljs-attribute\">border</span>:<span class=\"hljs-number\">5px</span> solid red;\n    <span class=\"hljs-attribute\">border-top-color</span>:green;\n</code></pre><h4><a name=\"-background\" class=\"anchor\" href=\"#-background\"><span class=\"header-link\"></span></a>常见样式-背景 background</h4><p>内容是会撑开容器宽高、背景不会占用容器宽高  </p>\n<pre><code><span class=\"hljs-built_in\">background</span>-<span class=\"hljs-built_in\">color</span>    背景颜色  \n<span class=\"hljs-built_in\">background</span>-<span class=\"hljs-built_in\">image</span>    背景图   \n<span class=\"hljs-built_in\">background</span>-<span class=\"hljs-built_in\">image</span>:url(img/<span class=\"hljs-number\">1.</span>jpg)      背景图引用路径\n</code></pre><p>背景图默认铺满整个背景</p>\n<h5><a name=\"background-repeat-\" class=\"anchor\" href=\"#background-repeat-\"><span class=\"header-link\"></span></a>background-repeat 背景平铺</h5><pre><code>background-<span class=\"hljs-keyword\">repeat</span>           背景重复\n   <span class=\"hljs-keyword\">no</span>-<span class=\"hljs-keyword\">repeat</span>     不重复  \n   <span class=\"hljs-keyword\">repeat</span>-x      x轴重复\n   <span class=\"hljs-keyword\">repeat</span>-y;     y轴重复\n   <span class=\"hljs-keyword\">repeat</span>;       x、y轴都重复\n</code></pre><h5><a name=\"-\" class=\"anchor\" href=\"#-\"><span class=\"header-link\"></span></a>背景图定位</h5><pre><code><span class=\"hljs-attribute\">background-position</span>:x y;        背景定位  \n    具体数值\n    方向 <span class=\"hljs-attribute\">left</span> <span class=\"hljs-attribute\">right</span> center\n    <span class=\"hljs-attribute\">top</span> <span class=\"hljs-attribute\">bottom</span> center\n当第二个属性值没有填写的时候,默认居中。\n</code></pre><h5><a name=\"-\" class=\"anchor\" href=\"#-\"><span class=\"header-link\"></span></a>背景图是否滚动</h5><pre><code><span class=\"hljs-attribute\">background-attachment</span>       背景图是否滚动\n    fixed       固定在浏览器可视区域\n    scroll      跟随滚动条滚动\n</code></pre><h5><a name=\"-\" class=\"anchor\" href=\"#-\"><span class=\"header-link\"></span></a>背景图复合样式</h5>","head":{"title":"HTML5-基础篇：第一章","date":"12 Sep 2017","tags":["妙味课堂"],"skip":false,"realDate":"2017-09-12T10:46:07.000Z"}},"Java-first2":{"content":"<h1><a name=\"-\" class=\"anchor\" href=\"#-\"><span class=\"header-link\"></span></a>对象和对象的引用</h1><ol>\n<li>何谓对象?  </li></ol>\n<ul>\n<li>要理解什么是对象就要结合类一起理解</li><li>每个对象都是每个类的实例(instance),这里,&quot;类&quot;就是&quot;类型&quot;的同义词。类相当于人类,而&quot;张三&quot;就是独享,相当于&quot;人类&quot;的实例。  </li></ul>\n<ol>\n<li>何谓对象引用? </li></ol>\n<ul>\n<li>在Java里,一切都被&quot;看作&quot;对象,但<strong>操纵的标识符实际上是指向一个对象的&quot;引用(reference)&quot;</strong>。  </li><li>对象和对象引用不是一回事,是两个完全不同的概念。<br><code>Person person = new person(&#39;张三&#39;);</code><br>相当于:<br><code>Person person;</code>  <code>//声明一个Person类的引用</code><br><code>person = new person(&#39;张三&#39;);</code>      <code>//创建一个名为&quot;张三&quot;的新对象</code><br>这两行代码实现的功能和上面的一行代码是完全一样的。<br>在Java中,<strong>new是用来在堆上创建对象用的</strong>,由此可见,person并不是所创建的对象。上面说<br>&quot;<strong>操纵的标识符实际上是指向一个对象的引用</strong>&quot;<br>也就是说,person是一个引用,是指向一个可以指向Person类对象的一个引用<br>真正创建对象的语句是右边的<code>new person(&quot;张三&quot;)</code>。  </li></ul>\n<p><strong>一个引用可以指向多个对象</strong><br><code>Person = person</code><br> <code>person = new person(&#39;张三&#39;);</code><br> <code>person = new person(&#39;李四&#39;);</code><br> <strong>一个Person类的引用,它可以指向任何Person类的实例(不止一个)</strong><br> <strong>同样的,一个对象也可以被多个引用所指</strong><br> <code>Person person1 = new person(&#39;张三&#39;);</code>\n <code>Person person2 = person1;</code>  </p>\n<h1><a name=\"-code-dog-code-\" class=\"anchor\" href=\"#-code-dog-code-\"><span class=\"header-link\"></span></a>控制<code>Dog</code>类型</h1><p>方法: 通过引用变量的来存取Dog的实例变量与方法\n引用变量通过使用圆点运算符来存取Dog的实例变量与方法。<br><code>Dog fido = new dog();  //声明一个名为fido的对象并定义为Dog类型的变量</code><br><code>fido.name = &#39;fido&#39;;    //通过圆点运算符来读取变量fido的值name</code>  </p>\n<h1><a name=\"-code-dog-code-code-dog-code-\" class=\"anchor\" href=\"#-code-dog-code-code-dog-code-\"><span class=\"header-link\"></span></a>通过数组来存取<code>Dog</code>数组中的<code>Dog</code></h1><p><strong>注意事项</strong>   </p>\n<ul>\n<li>对数组的操作不需要变量名称</li><li>在数组中是通过数组的索引来操作特定对象<br><code>Dog[] myDogs = new Dog[3];     //声明一个名为myDogs的Dog数组并设定成员数量为3</code><br><code>myDogs[0] = new Dog();    //创建数组的第一个成员</code><br><code>myDogs[0].name = &#39;fido&#39;;  //读取数组中第一个成员的name值为&#39;fido&#39;</code>  </li></ul>\n","head":{"title":"<Head first java>学习笔记二","date":"21 Aug 2017","tags":["Head first java"],"skip":false,"realDate":"2017-08-21T04:11:55.000Z"}},"Java":{"content":"<h1><a name=\"-\" class=\"anchor\" href=\"#-\"><span class=\"header-link\"></span></a>类和对象</h1><p>关系: <strong>对象是靠类的模型塑造出来的</strong>   </p>\n<p>对象是已知的事物,即<strong>实例变量</strong><br>对象会执行的动作就是<strong>方法</strong>   </p>\n<h1><a name=\"-\" class=\"anchor\" href=\"#-\"><span class=\"header-link\"></span></a>类和方法</h1><p>关系: 设计类时,会设计出操作对象数据的方法  </p>\n<h1><a name=\"-\" class=\"anchor\" href=\"#-\"><span class=\"header-link\"></span></a>运用对象的条件</h1><p>要被操作于对象的类<br>是用来测试该类的类  </p>\n<h1><a name=\"-\" class=\"anchor\" href=\"#-\"><span class=\"header-link\"></span></a>简述抽象提取和封装</h1><p>我们习惯性地,将一些属性和方法抽象出来封装成<strong>类</strong><br><strong>抽象提取的特点:</strong><br>只提取有用的,忽略与主题无关的<br>抽象提取的产物就是类\n<strong>抽象提取的内容:</strong><br>属性和方法</p>\n<p><strong>封装的内容:</strong><br>抽象提取出的属性和方法  </p>\n<p><strong>总结</strong><br>抽象提取是一个思维过程,封装是一个行为过程。抽象提取的属性一定是围绕主题的,围绕属性的行为的。<br>实例(人、狗、汽车)通过抽象和封装的过程形成类。<br>类通过实例化(new)形成了实例,二者互逆。</p>\n","head":{"title":"<Head first java>学习笔记一","date":"21 Aug 2017","tags":["Head first java笔记"],"skip":false,"realDate":"2017-08-21T03:39:35.000Z"}},"我的文章":{"content":"<h2><a name=\"-\" class=\"anchor\" href=\"#-\"><span class=\"header-link\"></span></a>安装</h2><pre><code>npm install -g moka-<span class=\"hljs-keyword\">cli</span>\n</code></pre><h2><a name=\"-\" class=\"anchor\" href=\"#-\"><span class=\"header-link\"></span></a>操作</h2><h2><a name=\"-\" class=\"anchor\" href=\"#-\"><span class=\"header-link\"></span></a>进入根目录</h2><pre><code> <span class=\"hljs-built_in\">cd</span> moka-blog\n</code></pre><p> <strong>以下操作均在博客根目录下执行</strong></p>\n<pre><code>moka -h # 帮助\nmoka init # ！重新初始化你的博客目录（危险操作）\nmoka server # 在本地搭建 HTTP 服务（预览本地博客），动态更新数据 (bug)\n\nmoka <span class=\"hljs-keyword\">generate</span> # 产生前端静态页面及其资源\nmoka staticServer # 在本地搭建 HTTP 服务（预览本地博客），静态服务（依赖于 <span class=\"hljs-keyword\">generate</span>）\n\nmoka <span class=\"hljs-keyword\">new</span> <span class=\"hljs-string\">\"文章名\"</span> # 新建文章在 <span class=\"hljs-meta\">`source/_articles/*.md`</span>\nmoka deploy # 部署 <span class=\"hljs-meta\">`static` 中的文件到远端服务器</span>\n\nmoka bak # 备份博客目录\n\n\nmoka d -gb  # 一键 <span class=\"hljs-keyword\">generate</span>/发布/备份\n</code></pre>","head":{"title":"Moka 入门使用","date":"19 Aug 2017","tags":["使用教程"],"cover":"https://timgsa.baidu.com/timg?image&quality=80&size=b9999_10000&sec=1503292912253&di=0dd3999f9e162aa841dc67d4aa9942cf&imgtype=0&src=http%3A%2F%2Fimg2.ph.126.net%2FiACD23QQSjl16UenBiw0Jw%3D%3D%2F6598252841168625161.jpg","skip":false,"realDate":"2017-08-19T13:52:30.000Z"}},"菜鸟教程1":{"content":"<h1><a name=\"java-\" class=\"anchor\" href=\"#java-\"><span class=\"header-link\"></span></a>Java基础语法</h1><h5><a name=\"-java-\" class=\"anchor\" href=\"#-java-\"><span class=\"header-link\"></span></a>我的第一个Java程序</h5><pre><code><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">HelloWorld</span>{\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">main</span>(<span class=\"hljs-params\">String[] args</span>)</span>{\n        System.<span class=\"hljs-keyword\">out</span>.println<span class=\"hljs-string\">\"Hello World!\"</span>;\n    }\n}\n</code></pre><h4><a name=\"-code-main-code-code-java-code-\" class=\"anchor\" href=\"#-code-main-code-code-java-code-\"><span class=\"header-link\"></span></a>此处<code>main</code>是程序的入口,一个<code>java</code>程序运行必须有且只有一个入口。</h4><p><strong><code>String[] args</code> 和 <code>String args[]</code> 都可以执行,但是推荐使用<code>String[] args</code>,因为这样可以避免误读和歧义。</strong></p>\n<p> 执行代码:</p>\n<pre><code><span class=\"hljs-meta\"> $</span><span class=\"bash\">  javac HelloWorld.java  </span>\n<span class=\"hljs-meta\"> $</span><span class=\"bash\">  java HelloWord  </span>\n     Hello World\n</code></pre><p> 代码解析:<br> 此段代码用到javac和java两个命令。<br> javac 即表示将一个java源文件编译为一个字节码文件。<br> 格式为:javac + 文件名.java。本例中是 javac HelloWorld.java<br> java 即表示运行一个字节码文件。格式为: java + java文件类名。如:java HelloWorld<br> <strong>javac是一个编译的过程,如果编译没有发生错误,会将一个java文件编译为class文件。而class文件名就是java中的类名,如HelloWorld就是一个类名。</strong>  </p>\n<h2><a name=\"java-\" class=\"anchor\" href=\"#java-\"><span class=\"header-link\"></span></a>Java基础语法</h2><p><strong>一个Java程序可以看成是一系列对象的集合,而这些对象通过调用彼此不同的方法来协同工作。</strong>\n<strong>对象:</strong> 对象是类的一个实例,有状态和行为。如一条狗是一个对象,它的状态有:颜色、品种、名字。行为有摇尾巴、叫、吃等。<br><strong>类:</strong> 类是一个模板,它描述一系列对象的行为和状态。<br><strong>方法:</strong> 方法就是行为,一个类可以有很多方法。逻辑运算、数据修改以及所有动作都是在方法里完成的。<br><strong>实例变量:</strong> 每个对象都有实例变量,对象的状态由这些实例变量的值决定。  </p>\n<h2><a name=\"java-\" class=\"anchor\" href=\"#java-\"><span class=\"header-link\"></span></a>Java基本语法</h2><p>编写Java程序时，应注意以下几点：  </p>\n<ul>\n<li>大小写敏感：Java是大小写敏感的，这就意味着标识符Hello与hello是不同的。  </li><li>类名：对于所有的类来说，类名的首字母应该大写。如果类名由若干单词组成，那么每个单词的首字母应该大写，例如 MyFirstJavaClass 。  </li><li>方法名：所有的方法名都应该以小写字母开头。如果方法名含有若干单词，则后面的每个单词首字母大写。  </li><li>源文件名：源文件名必须和类名相同。当保存文件的时候，你应该使用类名作为文件名保存（切记Java是大小写敏感的），文件名的后缀为.java。（如果文件名和类名不相同则会导致编译错误）。  </li><li>主方法入口：所有的Java 程序由<code>public static void main(String []args)</code>方法开始执行。  </li></ul>\n<h2><a name=\"java-\" class=\"anchor\" href=\"#java-\"><span class=\"header-link\"></span></a>Java标识符</h2><ul>\n<li>Java所有的组成部分都需要名字。类名、变量名以及方法名都被称为标识符。</li><li>关于Java标识符，有以下几点需要注意：</li><li>所有的标识符都应该以字母（A-Z或者a-z）,美元符（$）、或者下划线（_）开始</li><li>首字符之后可以是字母（A-Z或者a-z）,美元符（$）、下划线（_）或数字的任何字符组合</li><li>关键字不能用作标识符</li><li>标识符是大小写敏感的</li><li>合法标识符举例：age、$salary、_value、__1_value</li><li>非法标识符举例：123abc、-salary  </li></ul>\n<h2><a name=\"java-\" class=\"anchor\" href=\"#java-\"><span class=\"header-link\"></span></a>Java修饰符</h2><p>像其他语言一样，Java可以使用修饰符来修饰类中方法和属性。主要有两类修饰符：</p>\n<ul>\n<li><strong>访问控制修饰符 : default, public , protected, private</strong></li><li><strong>非访问控制修饰符 : final, abstract, strictfp</strong>  </li></ul>\n<p>在后面的章节中我们会深入讨论Java修饰符。</p>\n<h2><a name=\"java-\" class=\"anchor\" href=\"#java-\"><span class=\"header-link\"></span></a>Java常用的转义字符：</h2><p><code>&quot;\\b&quot; (退格)  \n    &quot;\\f&quot; (换页)  \n    &quot;\\n&quot; (换行)  \n    &quot;\\r&quot; (回车)    \n    &quot;\\t&quot; (水平制表符(到下一个tab位置))    \n    &quot;\\&#39; &quot; (单引号)    \n    &quot;\\&quot; &quot; (双引号)   \n    &quot;\\\\&quot; (反斜杠)</code></p>\n<h2><a name=\"java-\" class=\"anchor\" href=\"#java-\"><span class=\"header-link\"></span></a>Java变量</h2><p>Java中主要有如下几种类型的变量</p>\n<ul>\n<li><strong>局部变量</strong></li><li><strong>类变量（静态变量）</strong></li><li><strong>成员变量（非静态变量)</strong></li></ul>\n<h2><a name=\"java-\" class=\"anchor\" href=\"#java-\"><span class=\"header-link\"></span></a>Java数组</h2><p><strong>数组是储存在堆上的对象，可以保存多个同类型变量。</strong></p>\n<h2><a name=\"java-\" class=\"anchor\" href=\"#java-\"><span class=\"header-link\"></span></a>Java枚举</h2><p>枚举限制变量只能是预先设定好的值,使用枚举可以减少代码中的bug。  </p>\n<p>实例:果汁店中有小杯、中杯、大杯的果汁,顾客只能从三种规格中选择一种购买。  </p>\n<pre><code><span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">FreshJuice</span>{         </span>\n    <span class=\"hljs-class\"><span class=\"hljs-keyword\">enum</span> <span class=\"hljs-title\">FreshJuiceSize</span>{<span class=\"hljs-title\">SMALL</span>,<span class=\"hljs-title\">MEDIUM</span>,<span class=\"hljs-title\">LARGE</span>}</span>\n    FreshJuceSize size;\n} \npublic <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">FreshJuiceTest</span>{</span>\n    public static void main(String[] args){\n        FreshJuice juice = new juice();\n        juice.size = FreshJuiceSize.size.Medium\n    }\n}\n</code></pre><h2><a name=\"-\" class=\"anchor\" href=\"#-\"><span class=\"header-link\"></span></a>继承</h2><p>在Java中,一个类可以由其他类派生。如果要创建一个类,而且存在一个类具有你所需要的属性和方法,那么可以将新创建的类继承该类。\n利用继承的方法,可以重用已存在类的属性和方法,而不用重写这些代码。被继承的类称为超类(superclass),派生的类称为子类(subclass)。 </p>\n<h2><a name=\"-\" class=\"anchor\" href=\"#-\"><span class=\"header-link\"></span></a>接口</h2><p>Java接口是一系列方法的声明，是一些方法特征的集合，一个接口只有方法的特征没有方法的实现，因此这些方法可以在不同的地方被不同的类实现，而这些实现可以具有不同的行为（功能）</p>\n","head":{"title":"菜鸟教程1","date":"06 Sep 2017","tags":["菜鸟教程"],"skip":false,"realDate":"2017-09-06T03:34:51.000Z"}},"菜鸟教程2":{"content":"<h1><a name=\"java-\" class=\"anchor\" href=\"#java-\"><span class=\"header-link\"></span></a>Java对象和类</h1><p>Java作为一种面向对象语言。支持以下基本概念：</p>\n<ul>\n<li>多态</li><li>继承</li><li>封装</li><li>抽象</li><li>类</li><li>对象</li><li>实例</li><li>方法</li><li>重载</li></ul>\n<p>对象:对象是类的一个实例（对象不是找个女朋友），有状态和行为。例如，一条狗是一个对象，它的状态有：颜色、名字、品种；行为有：摇尾巴、叫、吃等。\n类: 类是一个模板，它描述一类对象的行为和状态。<br>例如:男生和女生是两个类,则每个男生是男生类中的对象,每个女生是女生类中的对象。<br>拿一条狗来举例，它的状态有：名字、品种、颜色，行为有：叫、摇尾巴和跑。\n对比现实对象和软件对象,它们之间非常相似。软件对象的属性就是它的状态,行为通过方法体现。<br>在软件开发中,方法操作对象内部状态的改变,对象的相互调用也是通过方法来完成。</p>\n<h2><a name=\"java-\" class=\"anchor\" href=\"#java-\"><span class=\"header-link\"></span></a>Java中的类</h2><p>类可以看成是创建java对象的模板  </p>\n<p>这是一个简单的类:</p>\n<pre><code><span class=\"hljs-keyword\">public</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">Dog</span>{</span>\n    String breed;\n    <span class=\"hljs-keyword\">int</span> age;\n    String color;\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">barking</span><span class=\"hljs-params\">()</span></span>{\n    }\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">hungry</span><span class=\"hljs-params\">()</span></span>{\n    }\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">sleeping</span><span class=\"hljs-params\">()</span></span>{\n    }\n}\n</code></pre><p>一个类可以包含以下类型变量:</p>\n<ul>\n<li><strong>局部变量:</strong> 在方法、构造方法或者是语句块中定义的变量叫做局部变量。变量声明和初始化都是在方法中。方法结束后,变量自动销毁。</li><li><strong>成员变量:</strong> 成员变量是定义在类中、方法之外的变量,这种变量在创建对象的时候实例化。成员变量可以被类中的方法、构造方法和特定类的语句块访问。</li><li><strong>类变量:</strong>  类变量也声明在类中,方法体之外,但必须用static修饰。<br>一个类中可以有多个方法,上面的barking、hungry、sleeping都是Dog类的方法。</li></ul>\n<h2><a name=\"-\" class=\"anchor\" href=\"#-\"><span class=\"header-link\"></span></a>构造方法</h2><p>每个类中都有构造方法。如果没有显式地为类定义构造方法,Java编译器会为该类提供一个默认构造方法。<br>在创建一个对象的时候,至少要调用一个构造方法。<strong>构造方法的名称必须与类名相同,一个类中可以有一个或多个构造方法。</strong>  </p>\n<p>## </p>\n","head":{"title":"菜鸟教程2","date":"06 Sep 2017","tags":["菜鸟教程"],"skip":false,"realDate":"2017-09-06T03:33:43.000Z"}}},"index":{"tagMap":{"妙味课堂":["HTML5-基础篇：第一章"],"JavaScript权威指南":["Chapter-1"],"菜鸟教程":["菜鸟教程1","菜鸟教程2"],"Head first java":["Java-first2"],"Head first java笔记":["Java"],"使用教程":["我的文章"]},"sorted":["HTML5-基础篇：第一章","Chapter-1","菜鸟教程1","菜鸟教程2","Java-first2","Java","我的文章"]}}